package main

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"path/filepath"
	"time"

	"github.com/adrg/xdg"
	"github.com/pocketbase/pocketbase"
	"github.com/pocketbase/pocketbase/apis"
	"github.com/pocketbase/pocketbase/core"
	"github.com/pocketbase/pocketbase/plugins/migratecmd"
)

var (
	pbApp    *pocketbase.PocketBase
	pbCancel context.CancelFunc
)

func runPB() {
	// Configure data directory
	dataDir := filepath.Join(xdg.DataHome, "BoxTest", "pb_data")
	if os.Getenv("APP_ENV") == "development" {
		dataDir = "./pb_data"
	}

	// Create context for graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	pbCancel = cancel

	// Initialize PocketBase
	pbApp = pocketbase.NewWithConfig(pocketbase.Config{
		DefaultDataDir: dataDir,
	})

	// Register migrations
	migratecmd.MustRegister(pbApp, pbApp.RootCmd, migratecmd.Config{
		Automigrate: true,
	})

	// Serve static files
	pbApp.OnServe().BindFunc(func(e *core.ServeEvent) error {
		e.Router.GET("/*", apis.Static(os.DirFS("./pb_public"), false))
		return nil
	})

	// Start server in goroutine
	go func() {
		if err := pbApp.Execute(); err != nil && err != http.ErrServerClosed {
			appLogger.Fatal(fmt.Sprintf("PocketBase failed: %v", err))
		}
	}()

	// Graceful shutdown listener
	go func() {
		<-ctx.Done()
		shutdownPB()
	}()
}

func shutdownPB() {
	if pbApp == nil {
		return
	}

	// Graceful server shutdown
	_, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := pbApp.ResetBootstrapState(); err != nil {
		appLogger.Error(fmt.Sprintf("Cleanup error: %v", err))
	}
}
